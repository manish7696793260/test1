AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Omron-Common-Auth-Service

Parameters:

  EnvironmentType:
    Description: An environment type Develop/QA/Staging/Beta/Production.
    Type: String
    AllowedValues: [ dev, qa, stg, beta, prd ]
    Default: dev

  Stage:
    Description: Unique stage type Develop/QA/Staging/Beta/Production.
    Type: String
    AllowedValues: [ dev_global, qa_global, stg_global, beta_global, prd_global ]
    Default: dev_global

  SpecificRegion:
    Description: Specific region for US/East-US
    Type: String
    AllowedValues: [ US, EAST-US ]
    Default: US

  INFOLOGLEVEL:
    Description: Allow all log levels
    Type: String

  WARNLOGLEVEL:
    Description: Allow all warn log only
    Type: String

  ERRORLOGLEVEL:
    Description: Allow all error log only
    Type: String
  
  SecretManager:
    Description: Secret Manager Environment Name
    Type: String
  
  SecretString:
    Description: Secret manager string
    Type: String

  SubNetID1:
    Description: Subnet id of the VPC
    Type: String

  SubNetID2:
    Description: Subnet id of the VPC
    Type: String

  SecurityGroupID:
    Description: Security group id of the VPC
    Type: String
  
  VPCID:
    Description: VPC ID
    Type: String

  NotificationEmailFrom:
    Description: Source email for email send
    Type: String
 
  NotificationEmailTo:
    Description: Destination email for email
    Type: String

  LambdaRole:
    Description: Lambda role for common auth service
    Type: String

  OFCSecretManagerEC2IP: 
    Description: EC2_IP of OFC Secret Manager
    Type: String
  
  OFCSecretManagerPort:
    Description: PORT of OFC Secret Manager
    Type: String

Globals:
  Function:
    Tags:
      ohi:project: "omron-common"
      ohi:application: "common-auth"
      ohi:module: "common-auth-be"
      ohi:environment: !Sub ${EnvironmentType}

Conditions:

  CreateNotPrd: !Not [!Equals [ !Ref EnvironmentType, prd]]

Resources:

  ApiGatewayVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Sub ${VPCID}
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      VpcEndpointType: Interface
      SubnetIds:
        - !Sub ${SubNetID1}
        - !Sub ${SubNetID2}
      SecurityGroupIds:
        - !Sub ${SecurityGroupID}


  OmronCommonAuthApi:
    Type: AWS::Serverless::Api
    Properties:
      Tags:
        ohi:project: "omron-common"
        ohi:application: "common-auth"
        ohi:module: "common-auth-be"
        ohi:environment: !Sub ${EnvironmentType}
      MethodSettings:
      - LoggingLevel: INFO
        ResourcePath: '/*'
        HttpMethod: '*'
        DataTraceEnabled: true
        MetricsEnabled: false
      DefinitionBody:
        definitions:
          Empty:
            title: Empty Schema
            type: object        
        info:
          title: !Sub Omron-Common-Auth-Service-API-${EnvironmentType}
          version: '2024-06-12T04:29:17Z'
        paths:
          /user-management/signup:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: |
                    {
                      "body": $input.json('$'),
                      "headers": {
                        #foreach($param in $input.params().header.keySet())
                          "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                          #if($foreach.hasNext),#end
                        #end
                      }
                    }
                passthroughBehavior: "when_no_match"
                type: "aws"
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Stage}_common_auth_service_signup/invocations
          /user-management/resend-verification-email:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: |
                    {
                      "body": $input.json('$'),
                      "headers": {
                        #foreach($param in $input.params().header.keySet())
                          "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                          #if($foreach.hasNext),#end
                        #end
                      }
                    }
                passthroughBehavior: "when_no_match"
                type: "aws"
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Stage}_common_auth_service_resend_verification_email/invocations
          /user-management/login:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: |
                    {
                      "body": $input.json('$'),
                      "headers": {
                        #foreach($param in $input.params().header.keySet())
                          "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                          #if($foreach.hasNext),#end
                        #end
                      }
                    }
                passthroughBehavior: "when_no_match"
                type: "aws"
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Stage}_common_auth_service_login/invocations
          /user-management/forgot-password:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: |
                    {
                      "body": $input.json('$'),
                      "headers": {
                        #foreach($param in $input.params().header.keySet())
                          "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                          #if($foreach.hasNext),#end
                        #end
                      }
                    }
                passthroughBehavior: "when_no_match"
                type: "aws"
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Stage}_common_auth_service_forgot_password/invocations
          /user-management/custom-authorizer:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: |
                    {
                      "body": $input.json('$'),
                      "headers": {
                        #foreach($param in $input.params().header.keySet())
                          "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                          #if($foreach.hasNext),#end
                        #end
                      }
                    }
                passthroughBehavior: "when_no_match"
                type: "aws"
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Stage}_common_auth_service_custom_authorization/invocations
        swagger: '2.0'
        x-amazon-apigateway-gateway-responses:
          UNAUTHORIZED:
            statusCode: 401
            responseParameters:
              gatewayresponse.header.X-Content-Type-Options: "'nosniff'"
              gatewayresponse.header.X-XSS-Protection: "'1'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              application/json: "{\"success\":false, \"message\":$context.error.messageString}"
          DEFAULT_4XX:
            responseTemplates:
              application/json: "{\"success\": \"false\", \"error\":$context.error.messageString}"
          DEFAULT_5XX:
            responseTemplates:
              application/json: "{\"success\": \"false\", \"error\":$context.error.messageString}"
        x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: "Deny"
            Principal: "*"
            Action: "execute-api:Invoke"
            Resource: "execute-api:/*/*/*"      
            Condition:
              StringNotEquals:
                aws:sourceVpc: !Sub ${VPCID}
          - Effect: "Allow"
            Principal: "*"
            Action: "execute-api:Invoke"
            Resource: "execute-api:/*/*/*"
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - !Ref ApiGatewayVPCEndpoint
      StageName: !Sub ${EnvironmentType}

  createsecretmanager:
    Type: 'AWS::SecretsManager::Secret'
    Condition: CreateNotPrd
    Properties:
      Tags:
        - 
          Key: "ohi:project"
          Value: "omron-common"
        - 
          Key: "ohi:application"
          Value: "common-auth"        
        - 
          Key: "ohi:module"
          Value: "common-auth-be"        
        - 
          Key: "ohi:environment"
          Value: !Sub ${EnvironmentType} 
      Name: !Sub ${SecretManager}_AUTH_SERVICE_SECRETMANAGER
      Description: "This is used to create secret manager using cloud formation"
      SecretString: !Sub ${SecretString}

  AuthServiceLayer:
    Properties:
      LayerName: !Sub ${Stage}_common_auth_service_layer
      ContentUri: ../utils
      CompatibleRuntimes:
        - nodejs18.x
        - nodejs20.x
      RetentionPolicy: Delete
    Type: AWS::Serverless::LayerVersion

  CommonAuthInvokeLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}_common_auth_service_invoke_lambda
      Handler: index.handler
      Runtime: nodejs20.x
      CodeUri: ./../lambda/invoke_lambda
      Description: 'Warmup lambda for the API lambdas'
      MemorySize: 256
      Timeout: 300
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
      Events:
        Schedule1:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
      Layers:
        - !Ref AuthServiceLayer
      Environment:
        Variables:
          NotificationEmailFrom: !Sub ${NotificationEmailFrom}
          NotificationEmailTo: !Sub ${NotificationEmailTo}
          REGION:
            Ref: AWS::Region
          STAGE: !Sub ${Stage}
          ENV: !Sub ${EnvironmentType}
          LOGLEVELS: !Sub ${INFOLOGLEVEL}


  #*********** Common auth service signup lambda function **********
  CommonAuthServiceSignupLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}_common_auth_service_signup
      CodeUri: ./../lambda/signup
      Handler: index.handler
      Runtime: nodejs20.x
      Description: 'common auth service lambda function for signup API'
      Layers:
        - !Ref AuthServiceLayer
      MemorySize: 256
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
      Events:
        GetResource:
          Properties:
            Path: /user-management/signup
            Method: post
            RestApiId: !Ref OmronCommonAuthApi
          Type: Api 
      Environment:
        Variables:
          STAGE: !Sub ${Stage}
          REGION:
            Ref: AWS::Region
          SECRET_MANAGER_NAME: !Sub ${SecretManager}_AUTH_SERVICE_SECRETMANAGER
          EC2_IP: !Sub ${OFCSecretManagerEC2IP}
          PORT: !Sub ${OFCSecretManagerPort}
          LOGLEVELS: !Sub ${INFOLOGLEVEL}
          OFC_MASTER_TABLE: !Sub ${Stage}_ofc_master
          USER_TABLE: !Sub ${Stage}_ofc_mobile
      VpcConfig:
        SecurityGroupIds:
        - !Sub ${SecurityGroupID}
        SubnetIds:
        - !Sub ${SubNetID1}
        - !Sub ${SubNetID2}


  #*********** Common auth service login lambda function **********
  CommonAuthServiceLoginLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}_common_auth_service_login
      CodeUri: ./../lambda/login
      Handler: index.handler
      Runtime: nodejs20.x
      Description: 'function for common auth service login API'
      Layers:
        - !Ref AuthServiceLayer
      MemorySize: 256
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
      Events:
        GetResource:
          Properties:
            Path: /user-management/login
            Method: post
            RestApiId: !Ref OmronCommonAuthApi
          Type: Api 
      Environment:
        Variables:
          STAGE: !Sub ${Stage}
          REGION:
            Ref: AWS::Region
          SECRET_MANAGER_NAME: !Sub ${SecretManager}_AUTH_SERVICE_SECRETMANAGER
          EC2_IP: !Sub ${OFCSecretManagerEC2IP}
          PORT: !Sub ${OFCSecretManagerPort}
          LOGLEVELS: !Sub ${INFOLOGLEVEL}
          OFC_MOBILE_TABLE: !Sub ${Stage}_ofc_mobile
      VpcConfig:
        SecurityGroupIds:
        - !Sub ${SecurityGroupID}
        SubnetIds:
        - !Sub ${SubNetID1}
        - !Sub ${SubNetID2}


  #*********** Common auth service resend verification email lambda function **********
  CommonAuthServiceResendVerifictionEmailLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}_common_auth_service_resend_verification_email
      CodeUri: ./../lambda/resend_verification_email
      Handler: index.handler
      Runtime: nodejs20.x
      Description: 'function to resend verification code to the user over mail'
      Layers:
        - !Ref AuthServiceLayer
      MemorySize: 256
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
      Events:
        GetResource:
          Properties:
            Path: /user-management/resend-verification-email
            Method: post
            RestApiId: !Ref OmronCommonAuthApi
          Type: Api 
      Environment:
        Variables:
          STAGE: !Sub ${Stage}
          REGION:
            Ref: AWS::Region
          SECRET_MANAGER_NAME: !Sub ${SecretManager}_AUTH_SERVICE_SECRETMANAGER
          EC2_IP: !Sub ${OFCSecretManagerEC2IP}
          PORT: !Sub ${OFCSecretManagerPort}
          LOGLEVELS: !Sub ${INFOLOGLEVEL}
      VpcConfig:
        SecurityGroupIds:
        - !Sub ${SecurityGroupID}
        SubnetIds:
        - !Sub ${SubNetID1}
        - !Sub ${SubNetID2}


  #*********** Common auth service forgot password lambda function **********
  CommonAuthServiceForgotPasswordLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}_common_auth_service_forgot_password
      CodeUri: ./../lambda/forgot_password
      Handler: index.handler
      Runtime: nodejs20.x
      Description: 'AWS Lambda function for user forgot password API'
      Layers:
        - !Ref AuthServiceLayer
      MemorySize: 256
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
      Events:
        GetResource:
          Properties:
            Path: /user-management/forgot-password
            Method: post
            RestApiId: !Ref OmronCommonAuthApi
          Type: Api 
      Environment:
        Variables:
          STAGE: !Sub ${Stage}
          REGION:
            Ref: AWS::Region
          SECRET_MANAGER_NAME: !Sub ${SecretManager}_AUTH_SERVICE_SECRETMANAGER
          EC2_IP: !Sub ${OFCSecretManagerEC2IP}
          PORT: !Sub ${OFCSecretManagerPort}
          LOGLEVELS: !Sub ${INFOLOGLEVEL}
      VpcConfig:
        SecurityGroupIds:
        - !Sub ${SecurityGroupID}
        SubnetIds:
        - !Sub ${SubNetID1}
        - !Sub ${SubNetID2}


  #*********** Common auth service custom authorization lambda function **********
  CommonAuthServiceCustomAuthorizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Stage}_common_auth_service_custom_authorization
      CodeUri: ./../lambda/custom_authorization
      Handler: index.handler
      Runtime: nodejs20.x
      Description: 'function to resend verification code to the user over mail'
      Layers:
        - !Ref AuthServiceLayer
      MemorySize: 256
      Timeout: 30
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
      Events:
        GetResource:
          Properties:
            Path: /user-management/custom-authorizer
            Method: post
            RestApiId: !Ref OmronCommonAuthApi
          Type: Api 
      Environment:
        Variables:
          STAGE: !Sub ${Stage}
          REGION:
            Ref: AWS::Region
          SECRET_MANAGER_NAME: !Sub ${SecretManager}_AUTH_SERVICE_SECRETMANAGER
          LOGLEVELS: !Sub ${INFOLOGLEVEL}
          USER_TABLE: !Sub ${Stage}_ofc_mobile
      VpcConfig:
        SecurityGroupIds:
        - !Sub ${SecurityGroupID}
        SubnetIds:
        - !Sub ${SubNetID1}
        - !Sub ${SubNetID2}


Outputs:
  ApiGatewayUrlExport:
    Value: !Sub https://${OmronCommonAuthApi}.execute-api.us-west-2.amazonaws.com/${EnvironmentType}
    Export:
      Name: !Sub ${EnvironmentType}-common-auth-service-private-url
