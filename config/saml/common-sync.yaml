AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Common-Sync-Service

Parameters:

  Environment:
    Description: An environment type Develop/QA/Staging/Beta/Production.
    Type: String
    AllowedValues: [ dev, qa, stg, beta, prd ]
    Default: dev

  CountryCode:
    Description: Unique country code eu us jp etc.
    Type: String
    Default: us

  SubNetId1:
    Description: Subnet id of the VPC
    Type: String

  SubNetId2:
    Description: Subnet id of the VPC
    Type: String

  SecurityGroupId:
    Description: Security group id of the VPC
    Type: String
  
  VpcId:
    Description: VPC ID
    Type: String

  InfoLogLevel:
    Description: Allow all log levels
    Type: String

  LambdaRole:
    Description: Lambda role for common sync service
    Type: String

  NotificationEmailFrom:
    Description: Source email for email send
    Type: String
 
  NotificationEmailTo:
    Description: Destination email for email
    Type: String

  DeploymentRegion:
    Description: Region in which the application is deployed like usw2 euw1
    Type: String
    Default: usw2

  Prefix:
    Description: Substitute parameter for ${CountryCode}${Environment}-${DeploymentRegion}
    Type: String
    Default: usdev-usw2


Globals:
  Function:
    Runtime: nodejs20.x  # Default runtime
    MemorySize: 256
    Timeout: 30
    Handler: index.handler
    Environment:
      Variables:
        REGION:
            Ref: AWS::Region
        LOG_LEVELS: !Ref InfoLogLevel
    Layers:
      - !Ref CommonSyncLayer
    Tags:
      ohi:project: "common"
      ohi:application: "common-sync"
      ohi:module: "common-sync-be"
      ohi:environment: !Sub ${Prefix}
      ohi:stack-name : !Sub ${Prefix}-common-sync-be-stack

Conditions:
  IsExistingRegion: !Or
    - !Equals [!Ref CountryCode, eu]
    - !Equals [!Ref CountryCode, us]
    - !Equals [!Ref CountryCode, jp]

Resources:
  CommonSyncApiGatewayVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Sub ${VpcId}
      ServiceName: !Sub com.amazonaws.${AWS::Region}.execute-api
      VpcEndpointType: Interface
      SubnetIds:
        - !Sub ${SubNetId1}
        - !Sub ${SubNetId2}
      SecurityGroupIds:
        - !Sub ${SecurityGroupId}

  CommonSyncApi:
    Type: AWS::Serverless::Api
    Properties:
      Tags:
        ohi:project: "common"
        ohi:application: "common-sync"
        ohi:module: "common-sync-be"
        ohi:environment: !Sub ${Prefix}
        ohi:stack-name : !Sub ${Prefix}-common-sync-be-stack
      MethodSettings:
      - LoggingLevel: INFO
        ResourcePath: '/*'
        HttpMethod: '*'
        DataTraceEnabled: true
        MetricsEnabled: false
      AccessLogSetting: 
        DestinationArn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${Prefix}-common-sync-api-logs/common:*
      DefinitionBody:
        definitions:
          Empty:
            title: Empty Schema
            type: object 
        info:
          title: !Sub ${Prefix}-common-sync-api
          version: '2.0.0'
          description: API Gateway for common service
        consumes:
        - "application/json"
        produces:
        - "application/json"
        paths:
          /sync-vitals/sync-bp:
            post:
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: |
                    {
                      "body": $input.json('$'),
                      "headers": {
                        #foreach($param in $input.params().header.keySet())
                          "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                          #if($foreach.hasNext),#end
                        #end
                      }
                    }
                passthroughBehavior: "when_no_match"
                type: "aws"
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-common-sync-bp-lambda/invocations
            get:
              responses:
                '200': 
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"                 
                    Access-Control-Allow-Origin:
                      type: "string"                  
                    Strict-Transport-Security:
                      type: "string"
                    X-Content-Type-Options:
                      type: "string"
                    X-XSS-Protection:
                      type: "string"
                    Cache-Control:
                      type: "string"
                    Pragma:
                      type: "string"
                    Content-Disposition:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-common-sync-get-bp-readings-lambda/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Strict-Transport-Security: '''max-age=63072000; includeSubdomains; preload'''
                      method.response.header.X-XSS-Protection: '''1'''
                      method.response.header.Access-Control-Allow-Methods: "'GET'"
                      method.response.header.Access-Control-Allow-Origin: "'https://omron-documentation.s3.us-west-2.amazonaws.com'"
                      method.response.header.X-Content-Type-Options: '''nosniff'''
                      method.response.header.Cache-Control: '''no-cache; no-store'''
                      method.response.header.Content-Disposition: '''attachment'''
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-platform-id'"
                      method.response.header.Pragma: '''no-cache'''
                requestTemplates:
                  application/json: >
                    #set($inputRoot = $input.path('$'))
                    {
                      "app": "$input.params('app')",
                      "lastSyncedTime": "$input.params('lastSyncedTime')",
                      "nextPaginationKey": "$input.params('nextPaginationKey')",
                      "endTime": "$input.params('endTime')",
                      "startTime": "$input.params('startTime')",
                      "phoneIdentifier": "$input.params('phoneIdentifier')",
                      "dbIdentifier": "$input.params('dbIdentifier')",
                      "userID": "$input.params('userID')",
                      "headers": {
                        #foreach($param in $input.params().header.keySet())
                          "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                          #if($foreach.hasNext),#end
                        #end
                      }
                    }
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
          /sync-vitals/sync-weight:
            post:
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: '''POST'''
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                requestTemplates:
                  application/json: |
                    {
                      "body": $input.json('$'),
                      "headers": {
                        #foreach($param in $input.params().header.keySet())
                          "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                          #if($foreach.hasNext),#end
                        #end
                      }
                    }
                passthroughBehavior: "when_no_match"
                type: "aws"
                httpMethod: "POST"
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-common-sync-weight-lambda/invocations
            get:
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"                 
                    Access-Control-Allow-Origin:
                      type: "string"                  
                    Strict-Transport-Security:
                      type: "string"
                    X-Content-Type-Options:
                      type: "string"
                    X-XSS-Protection:
                      type: "string"
                    Cache-Control:
                      type: "string"
                    Pragma:
                      type: "string"
                    Content-Disposition:
                      type: "string"
              x-amazon-apigateway-integration:
                type: "aws"
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Prefix}-common-sync-get-weight-readings-lambda/invocations
                responses:
                  default:
                    statusCode: '200'
                    responseParameters:
                      method.response.header.Strict-Transport-Security: '''max-age=63072000; includeSubdomains; preload'''
                      method.response.header.X-XSS-Protection: '''1'''
                      method.response.header.Access-Control-Allow-Methods: "'GET'"
                      method.response.header.Access-Control-Allow-Origin: "'https://omron-documentation.s3.us-west-2.amazonaws.com'"
                      method.response.header.X-Content-Type-Options: '''nosniff'''
                      method.response.header.Cache-Control: '''no-cache; no-store'''
                      method.response.header.Content-Disposition: '''attachment'''
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-platform-id'"
                      method.response.header.Pragma: '''no-cache'''
                requestTemplates:
                  application/json: >
                    #set($inputRoot = $input.path('$'))
                    {
                      "app": "$input.params('app')",
                      "lastSyncedTime": "$input.params('lastSyncedTime')",
                      "nextPaginationKey": "$input.params('nextPaginationKey')",
                      "endTime": "$input.params('endTime')",
                      "startTime": "$input.params('startTime')",
                      "phoneIdentifier": "$input.params('phoneIdentifier')",
                      "dbIdentifier": "$input.params('dbIdentifier')",
                      "userID": "$input.params('userID')",
                      "headers": {
                        #foreach($param in $input.params().header.keySet())
                          "$param": "$util.escapeJavaScript($input.params().header.get($param))"
                          #if($foreach.hasNext),#end
                        #end
                      }
                    }
                passthroughBehavior: "when_no_templates"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
        swagger: '2.0'
        x-amazon-apigateway-gateway-responses:
          UNAUTHORIZED:
            statusCode: 401
            responseParameters:
              gatewayresponse.header.X-Content-Type-Options: "'nosniff'"
              gatewayresponse.header.X-XSS-Protection: "'1'"
              gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
              gatewayresponse.header.X-Frame-Options: "'DENY'"
            responseTemplates:
              application/json: "{\"success\":false, \"message\":$context.error.messageString}"
          DEFAULT_4XX:
            responseTemplates:
              application/json: "{\"success\": \"false\", \"error\":$context.error.messageString}"
          DEFAULT_5XX:
            responseTemplates:
              application/json: "{\"success\": \"false\", \"error\":$context.error.messageString}"
        x-amazon-apigateway-policy:
          Version: "2012-10-17"
          Statement:
          - Effect: "Deny"
            Principal: "*"
            Action: "execute-api:Invoke"
            Resource: "execute-api:/*/*/*"      
            Condition:
              StringNotEquals:
                aws:sourceVpc: !Sub ${VpcId}
          - Effect: "Allow"
            Principal: "*"
            Action: "execute-api:Invoke"
            Resource: "execute-api:/*/*/*"
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - !Ref CommonSyncApiGatewayVPCEndpoint
      StageName: !Sub ${Environment}

  CommonSyncLayer:
    Properties:
      LayerName: !Sub ${Prefix}-common-sync-layer
      ContentUri: ../../sync-service/utils
      CompatibleRuntimes:
        - nodejs18.x
        - nodejs20.x
      RetentionPolicy: Delete
    Type: AWS::Serverless::LayerVersion


  #*********** Common Sync Service Invoke Lambda function **********
  CommonSyncInvokeLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Prefix}-common-sync-invoke-lambda
      CodeUri: ../../sync-service/lambda/invoke_lambda
      Description: 'Warmup script for the common sync private API lambdas'
      Timeout: 300
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
      Events:
        Schedule1:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)
      Environment:
        Variables:
          NOTIFICATION_EMAIL_FROM: !Sub ${NotificationEmailFrom}
          NOTIFICATION_EMAIL_TO: !Sub ${NotificationEmailTo}
          DEPLOYMENT_REGION: !Sub ${DeploymentRegion}
          COUNTRY_CODE: !Sub ${CountryCode}
          ENVIRONMENT: !Ref Environment


  #*********** Common Sync Service Sync BP Lambda Function **********
  CommonSyncBpLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Prefix}-common-sync-bp-lambda
      CodeUri: ../../sync-service/lambda/sync_bp_readings
      Description: 'common sync service lambda function for Sync BP API'
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
      Events:
        GetResource:
          Properties:
            Path: /sync-vitals/sync-bp
            Method: post
            RestApiId: !Ref CommonSyncApi
          Type: Api 
      Environment:
        Variables:
          BP_READINGS: !If [IsExistingRegion,!Sub "${Environment}_global_bp_readings" , !Sub "${Prefix}-vlt-bp-readings-db"] 
      VpcConfig:
        SecurityGroupIds:
        - !Sub ${SecurityGroupId}
        SubnetIds:
        - !Sub ${SubNetId1}
        - !Sub ${SubNetId2}


  #*********** Common Sync Service Sync Weight Lambda Function **********
  CommonSyncWeightLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Prefix}-common-sync-weight-lambda
      CodeUri: ../../sync-service/lambda/sync_weight_readings
      Description: 'common sync service lambda function for Sync Weight API'
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
      Events:
        GetResource:
          Properties:
            Path: /sync-vitals/sync-weight
            Method: post
            RestApiId: !Ref CommonSyncApi
          Type: Api 
      Environment:
        Variables:
          NON_BP_READINGS: !If [IsExistingRegion,!Sub "${Environment}_global_non_bp_readings" , !Sub "${Prefix}-vlt-non-bp-readings-db"] 
      VpcConfig:
        SecurityGroupIds:
        - !Sub ${SecurityGroupId}
        SubnetIds:
        - !Sub ${SubNetId1}
        - !Sub ${SubNetId2}


  #*********** Common Sync Service Get BP Lambda Function **********
  CommonSyncGetBpReadingsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Prefix}-common-sync-get-bp-readings-lambda
      CodeUri: ../../sync-service/lambda/get_bp_readings
      Description: 'common sync service lambda function for fetching BP readings API'
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
      Events:
        GetResource:
          Properties:
            Path: /sync-vitals/sync-bp
            Method: get
            RestApiId: !Ref CommonSyncApi
          Type: Api 
      Environment:
        Variables:
          BP_READINGS: !If [IsExistingRegion,!Sub "${Environment}_global_bp_readings" , !Sub "${Prefix}-vlt-bp-readings-db"] 
      VpcConfig:
        SecurityGroupIds:
        - !Sub ${SecurityGroupId}
        SubnetIds:
        - !Sub ${SubNetId1}
        - !Sub ${SubNetId2}

  #*********** Common Sync Service Get Weight Readings Lambda Function **********
  CommonSyncGetWeightReadingsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Prefix}-common-sync-get-weight-readings-lambda
      CodeUri: ../../sync-service/lambda/get_weight_readings
      Description: 'common sync service lambda function for fetching weight readings API'
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
      Events:
        GetResource:
          Properties:
            Path: /sync-vitals/sync-weight
            Method: get
            RestApiId: !Ref CommonSyncApi
          Type: Api 
      Environment:
        Variables:
          NON_BP_READINGS: !If [IsExistingRegion,!Sub "${Environment}_global_non_bp_readings" , !Sub "${Prefix}-vlt-non-bp-readings-db"]
      VpcConfig:
        SecurityGroupIds:
        - !Sub ${SecurityGroupId}
        SubnetIds:
        - !Sub ${SubNetId1}
        - !Sub ${SubNetId2}

Outputs:
  CommonSyncApiGatewayUrl:
    Value: !Sub https://${CommonSyncApi}.execute-api.us-west-2.amazonaws.com/${Environment}
    Export:
      Name: !Sub ${Prefix}-common-sync-api-gateway-url